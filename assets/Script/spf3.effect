// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        centerPos: { value: [0.5,0.5] }
        val: { value: 0.10, range: [0,1] }
        time: { value: 0.00, range: [0,1] }
        BrokenScale: { value: 0.05, range: [0,1] }
        otherTexture: {}
        texture1: {}
        BrokenNormalMap: {}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif
  uniform sampler2D otherTexture; 

  uniform propertiesVext {
    vec2 centerPos;
    float val;
    float time;
  };

  int isContains (vec2 v2) {
    float val = 0.1;
    float rt = centerPos.x + val;
    float lt = centerPos.x - val;
    float rb = centerPos.y + val;
    float lb = centerPos.y - val;
    
    if(v2.x > rt || v2.x < lt || v2.y > rb || v2.y < lb ) {
      return 0;
    }
    return 1;
  }

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  
  uniform sampler2D otherTexture; 
  uniform sampler2D texture1; 
  /** 法线贴图 */
  uniform sampler2D BrokenNormalMap; 
  uniform properties {
    vec2 centerPos;
    float val;
    float time;
    float BrokenScale;
  };

  int isContains (vec2 v2,vec2 centerPos) {
    // float val = 0.05;
    float rt = centerPos.x + val;
    float lt = centerPos.x - val;
    float rb = centerPos.y + val;
    float lb = centerPos.y - val;
    
    if(v2.x > rt || v2.x < lt || v2.y > rb || v2.y < lb ) {
      return 0;
    }
    return 1;
  }

  vec4 testCol(vec2 uv,vec2 smallUv) {
    float LuminanceScale = 0.25;
    //读取片元对应法线贴图的颜色
		vec4 packedNormal = texture2D(BrokenNormalMap, smallUv);
 
    vec3 tangentNormal;
    //将颜色转换成法线方向
		tangentNormal = packedNormal.xyz * 2.0 - 1.0;
 
    // packednormal.x *= packednormal.w;
    // vec3 normal;
    // normal.xy = packednormal.xy * 2 - 1;
    // normal.z = sqrt(1 - saturate(dot(normal.xy, normal.xy)));

    //将法线方向按照原来倾斜的方向倾斜更多
		tangentNormal.xy *= BrokenScale;

    vec2 offset = tangentNormal.xy;
    vec3 col = texture2D(texture, uv.xy + offset).rgb;

    //取得片元本身颜色的平均值
		//片元本身颜色值越深 其平均值越大
    float luminance = (col.r + col.g + col.b) / 3.0;
    //将颜色的rgb值变得一样
		//rgb值一致的时候 颜色是属于白灰黑色系
		//值越小越偏黑 越偏大越偏白 中间过渡阶段是各种灰色
		vec3 gray = vec3(luminance,luminance,luminance);

    //lerp函数使得
    //finalCol的范围在gray和col之间
    //_LuminanceScale为0的时候是gray
    //_LuminanceScale为1的时候是col
    vec3 finalCol = gray + LuminanceScale * (col.xyz - gray.xyz);
    // vec3 finalCol = lerp(gray, col, LuminanceScale);
    return vec4(finalCol,1.0);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    if(isContains(v_uv0,centerPos) == 1) {
      // o.a = 0.0;
      //小范围的点击的坐标点映射到 otherTexture图片的坐标内;
      float x = (v_uv0.x - (centerPos.x - val))/(val + val);
      float y = (v_uv0.y - (centerPos.y - val))/(val + val);
      vec2 v2 = vec2(x,y);
      // o = testCol(v_uv0,v2);
 
      vec4 otherColor = texture2D(otherTexture, v_uv0);
      vec4 tempColor =texture2D(BrokenNormalMap,v2);
      o = mix(o, otherColor, 0.5);
      o = mix(o, tempColor, 0.5);

      if(tempColor.a<=0.2) {
         discard;
      }

      // vec4 otherColor = texture2D(otherTexture, vec2(x,y));
      // if(otherColor.a <=0.2){
      //   discard;
      // }
    }

    // if(isContains(v_uv0,centerPos) == 1) {

    //   // o.a = 0.0;
    //   //小范围的点击的坐标点映射到 otherTexture图片的坐标内;
    //   float x = (v_uv0.x - (centerPos.x - val))/(val + val);
    //   float y = (v_uv0.y - (centerPos.y - val))/(val + val);

    //     // 法向纹理r通道
    //   float height = texture2D(texture1,v_uv0).r;
    //   // 采样纹理
    //   if(height < time)
    //   {
    //       discard;
    //   } 

    //   // vec2 v2 = vec2(x,y);
    //   // vec4 otherColor = texture2D(otherTexture, vec2(x,y));
    //   // if(otherColor.a <=0.2){
    //   //   discard;
    //   // }
    // }

    // 法向纹理r通道
    // float height = texture2D(texture1,v_uv0).r;
    // // 采样纹理
    // if(height < time)
    // {
    //     discard;
    // }
    
    // if(height < time+0.04)
    // {
    //     // 溶解颜色，可以自定义
    //     // o = vec4(.9,.6,0.3,o.a);
    // }
            
    gl_FragColor = o;
  }
}%
