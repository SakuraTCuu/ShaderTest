{
  "ver": "1.0.25",
  "uuid": "a348a0c8-9bd2-46d8-8c2e-b85634bfe358",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nuniform sampler2D otherTexture;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D otherTexture;\nuniform sampler2D texture1;\nuniform sampler2D BrokenNormalMap;\nuniform vec2 centerPos;\nuniform float val;\nint isContains (vec2 v2,vec2 centerPos) {\n  float rt = centerPos.x + val;\n  float lt = centerPos.x - val;\n  float rb = centerPos.y + val;\n  float lb = centerPos.y - val;\n  if(v2.x > rt || v2.x < lt || v2.y > rb || v2.y < lb ) {\n    return 0;\n  }\n  return 1;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if(isContains(v_uv0,centerPos) == 1) {\n    float x = (v_uv0.x - (centerPos.x - val))/(val + val);\n    float y = (v_uv0.y - (centerPos.y - val))/(val + val);\n    vec2 v2 = vec2(x,y);\n    vec4 otherColor = texture2D(otherTexture, v_uv0);\n    vec4 tempColor =texture2D(BrokenNormalMap,v2);\n    o = mix(o, otherColor, 0.5);\n    o = mix(o, tempColor, 0.5);\n    if(tempColor.a<=0.2) {\n       discard;\n    }\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nuniform sampler2D otherTexture;\nuniform propertiesVext {\n  vec2 centerPos;\n  float val;\n  float time;\n};\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D otherTexture;\nuniform sampler2D texture1;\nuniform sampler2D BrokenNormalMap;\nuniform properties {\n  vec2 centerPos;\n  float val;\n  float time;\n  float BrokenScale;\n};\nint isContains (vec2 v2,vec2 centerPos) {\n  float rt = centerPos.x + val;\n  float lt = centerPos.x - val;\n  float rb = centerPos.y + val;\n  float lb = centerPos.y - val;\n  if(v2.x > rt || v2.x < lt || v2.y > rb || v2.y < lb ) {\n    return 0;\n  }\n  return 1;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if(isContains(v_uv0,centerPos) == 1) {\n    float x = (v_uv0.x - (centerPos.x - val))/(val + val);\n    float y = (v_uv0.y - (centerPos.y - val))/(val + val);\n    vec2 v2 = vec2(x,y);\n    vec4 otherColor = texture2D(otherTexture, v_uv0);\n    vec4 tempColor =texture2D(BrokenNormalMap,v2);\n    o = mix(o, otherColor, 0.5);\n    o = mix(o, tempColor, 0.5);\n    if(tempColor.a<=0.2) {\n       discard;\n    }\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}